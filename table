#! /usr/bin/bash
current_dir=$(pwd)

function create_table() {
    cd "$current_dir/$dbName"

    while true; do
        read -p "Please Enter Table name: " tbName
        if [[ $tbName =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]
        then
            break
        else
            echo "Invalid table name."
            echo "Please enter a name with lowercase, uppercase letters, numbers, and underscores (_)."
        fi
    done

    if [ -e "$tbName" ]
    then
        echo "Table '$tbName' already exists."
    else
        PK=0
        while true; 
        do
            read -p "Please Enter number of columns: " colNumber
            if [[ $colNumber -gt 0 && "$colNumber" =~ ^[0-9]+$ ]]
            then
                break
            else
                echo "Invalid number, please enter a valid number."
            fi
        done

        for ((i=0; i<$colNumber; i++))
        do
            line=""
            while true; 
	    do
                read -p "Please Enter Column name: " colName
                if [[ $colName =~ ^[a-z]+$ ]]
                then
                    line+=$colName
                    break
                else
                    echo "Invalid column name, enter name with lowercase letters only."
                fi
            done

            while true; 
	    do
                read -p "Please Enter Column Datatype (int or str): " colType
                if [[ "$colType" == "int" || "$colType" == "str" ]] 
                then
                    line+=:$colType
                    break
                else
                    echo "Invalid datatype, Please enter (int or str)."
                fi
            done

            if [[ $PK -eq 0 ]]
            then
                while true; 
                do
                    read -p "Do you want to make this column PK (Yes or No): " checkPK
                    if [[ "$checkPK" =~ ^(yes|y|no|n)$ ]]
                    then
                        if [[ "$checkPK" =~ ^(yes|y)$ ]]
                        then
                            if [[ "$colType" == "int" ]]
                            then
                                line+=:PK:unique
                                PK=1
                                break
                            else
                                echo "PK must be of 'int' datatype."
                                read -p "Please Enter Column name: " colName
                                line=$colName
                                read -p "Please Enter Column Datatype (int or str): " colType
                                line+=:$colType
                            fi
                        else
                            break
                        fi
                    else
                        echo "Invalid option, Please enter (yes or no)."
                    fi
                done
            fi

            echo $line >> .$tbName"_metadata"

        done
        touch "$tbName"
        echo "Table '$tbName' created successfully."
    fi
}

########################################################
function list_table(){
cd "$current_dir/$dbName"
tables=$(ls -A |  grep -v '^\.')

if [ -z "$tables" ]
then
	echo "not exist tables in $dbName"
else
	echo "list tables in $dbName are:"
        echo "$tables" 
fi
}

########################################################
function drop_table(){
cd "$current_dir/$dbName" 

echo "Available tables:"
    tables=()
    i=1
    for tb in *; do
        if [ -f "$tb" ] && [ ! -e "$tb"_metadata ]; then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done


while true; 
do
	read -p "Enter Please number table: " tbNumber
	if ! [[ "$tbNumber" =~ ^[0-9]+$ ]]
	then
        	echo "Please enter a valid number."
        continue
    	fi
	if [ "$tbNumber" -ge 1 ] && [ "$tbNumber" -le ${#tables[@]} ]
	then
		tbName="${tables[$((tbNumber - 1))]}"
		break
	    else
		echo "Invalid number, Please choose a valid table number."
	 fi
 done
i=1
for table in $tables 
do
	if [ $tbNumber -eq $i ]
	then
		tbName=$table
		break
	fi
	
	i=$((i + 1))
done

read -p "Are you sure want to delete (yes or no): " check
while [[ ! "$check" =~ ^(yes|no|y|n)$ ]]; 
do
    echo "Invalid option, Please enter (yes or no)."
    read -p "Are you sure you want to delete (yes or no): " check
done

if [[ "$check" =~ ^(yes|y)$ ]]
then
	rm "$tbName"
 	rm .$tbName*
	echo "$tbName deleted successfuly"
elif [[ "$check" =~ ^(no|n)$ ]]
then
	echo "deletion cancelled"
fi
}

########################################################
function insert_into_table(){
cd "$current_dir/$dbName" 

echo "Tables that exist in '$dbName':"
    tables=()
    i=1
    for tb in *; do
        if [[ -f "$tb" && ! "$tb" == .* ]]; then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done

if [[ ${#tables[@]} -eq 0 ]]; then
        echo "No tables to insert data."
        return
    fi
    
while true; 
do
	read -p "Enter Please number table: " tbNumber
	if ! [[ "$tbNumber" =~ ^[0-9]+$ ]]
	then
        	echo "Please enter a valid number."
        continue
    	fi
	if [ "$tbNumber" -ge 1 ] && [ "$tbNumber" -le ${#tables[@]} ]; then
		tbName="${tables[$((tbNumber - 1))]}"
		break
	    else
		echo "Invalid number. Please choose a valid table number."
	 fi
 done

if [[ ! -f .$tbName"_metadata" ]]
then
	echo "Metadata file for table '$tbName' is missing."
	break
fi

echo "Inserting into $tbName"
echo "Column Names and Data Types:"
mapfile -t metadata < ".$tbName"_metadata

columns=()
types=()
   for line in "${metadata[@]}"
	do
	colName=$(echo "$line" | cut -d: -f1)
	colType=$(echo "$line" | cut -d: -f2)
	columns+=("$colName")
	types+=("$colType")
	echo "$colName ($colType)"
	done

row=()
for index in "${!columns[@]}"
do
	colName=${columns[$index]}
	colType=${types[$index]}
	while true; 
	do
	    read -p "Enter data for $colName ($colType): " data
	    case $colType in
	    int)
		if ! [[ "$data" =~ ^[0-9]+$ ]]
		then 
		    echo "Invalid data, please enter data contain (0-9)."
		    continue
		fi
		if [[ "$colName" == "id" ]]
		then
		   if grep -q "^$data:" "$tbName"
		   then
		      echo "The ID $data already exists. Please enter a unique value."
		      continue
		   fi
	    	fi
		;;
	    str) 
		if [[ "$data" == "" ]] || [[ ! "$data" =~ ^[a-zA-Z0-9@.""]+$ ]] 
		then
		    echo "string cannot be empty and must contain letters or number , try again."
		    continue
		fi
		;;
	    *)
		echo "unknown data type: $colType"
		continue
		;;
	    esac

	    row+=("$data")
	    break
	done
done

echo "${row[*]}" | sed 's/ /:/g' >>"$tbName"
echo "row inserted successfully in '$tbName'."
}
