#! /usr/bin/bash
current_dir=$(pwd)

function create_table() {
    cd "$current_dir/$dbName"

    while true; do
        read -p "Please Enter Table name: " tbName
        if [[ $tbName =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]
        then
            break
        else
            echo "Invalid table name."
            echo "Please enter a name with lowercase, uppercase letters, numbers, and underscores (_)."
        fi
    done

    if [ -e "$tbName" ]
    then
        echo "Table '$tbName' already exists."
    else
        PK=0
        while true; 
        do
            read -p "Please Enter number of columns: " colNumber
            if [[ $colNumber -gt 0 && "$colNumber" =~ ^[0-9]+$ ]]
            then
                break
            else
                echo "Invalid number, please enter a valid number."
            fi
        done

        for ((i=0; i<$colNumber; i++))
        do
            line=""
            while true; 
	    do
                read -p "Please Enter Column name: " colName
                if [[ $colName =~ ^[a-z]+$ ]]
                then
                    line+=$colName
                    break
                else
                    echo "Invalid column name, enter name with lowercase letters only."
                fi
            done

            while true; 
	    do
                read -p "Please Enter Column Datatype (int or str): " colType
                if [[ "$colType" == "int" || "$colType" == "str" ]] 
                then
                    line+=:$colType
                    break
                else
                    echo "Invalid datatype, Please enter (int or str)."
                fi
            done

            if [[ $PK -eq 0 ]]
            then
                while true; 
                do
                    read -p "Do you want to make this column PK (Yes or No): " checkPK
                    if [[ "$checkPK" =~ ^(yes|y|no|n)$ ]]
                    then
                        if [[ "$checkPK" =~ ^(yes|y)$ ]]
                        then
                            if [[ "$colType" == "int" ]]
                            then
                                line+=:PK:unique
                                PK=1
                                break
                            else
                                echo "PK must be of 'int' datatype."
                                read -p "Please Enter Column name: " colName
                                line=$colName
                                read -p "Please Enter Column Datatype (int or str): " colType
                                line+=:$colType
                            fi
                        else
                            break
                        fi
                    else
                        echo "Invalid option, Please enter (yes or no)."
                    fi
                done
            fi

            echo $line >> .$tbName"_metadata"

        done
        touch "$tbName"
        echo "Table '$tbName' created successfully."
    fi
}

########################################################
function list_table(){
cd "$current_dir/$dbName"
tables=$(ls -A |  grep -v '^\.')

if [ -z "$tables" ]
then
	echo "not exist tables in $dbName"
else
	echo "list tables in $dbName are:"
        echo "$tables" 
fi
}

########################################################
function drop_table(){
cd "$current_dir/$dbName" 

echo "Available tables:"
    tables=()
    i=1
    for tb in *; do
        if [ -f "$tb" ] && [ ! -e "$tb"_metadata ]; then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done


while true; 
do
	read -p "Enter Please number table: " tbNumber
	if ! [[ "$tbNumber" =~ ^[0-9]+$ ]]
	then
        	echo "Please enter a valid number."
        continue
    	fi
	if [ "$tbNumber" -ge 1 ] && [ "$tbNumber" -le ${#tables[@]} ]
	then
		tbName="${tables[$((tbNumber - 1))]}"
		break
	    else
		echo "Invalid number, Please choose a valid table number."
	 fi
 done
i=1
for table in $tables 
do
	if [ $tbNumber -eq $i ]
	then
		tbName=$table
		break
	fi
	
	i=$((i + 1))
done

read -p "Are you sure want to delete (yes or no): " check
while [[ ! "$check" =~ ^(yes|no|y|n)$ ]]; 
do
    echo "Invalid option, Please enter (yes or no)."
    read -p "Are you sure you want to delete (yes or no): " check
done

if [[ "$check" =~ ^(yes|y)$ ]]
then
	rm "$tbName"
 	rm .$tbName*
	echo "$tbName deleted successfuly"
elif [[ "$check" =~ ^(no|n)$ ]]
then
	echo "deletion cancelled"
fi
}

########################################################
function insert_into_table(){
cd "$current_dir/$dbName" 

echo "Tables that exist in '$dbName':"
    tables=()
    i=1
    for tb in *; do
        if [[ -f "$tb" && ! "$tb" == .* ]]; then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done

if [[ ${#tables[@]} -eq 0 ]]; then
        echo "No tables to insert data."
        return
    fi
    
while true; 
do
	read -p "Enter Please number table: " tbNumber
	if ! [[ "$tbNumber" =~ ^[0-9]+$ ]]
	then
        	echo "Please enter a valid number."
        continue
    	fi
	if [ "$tbNumber" -ge 1 ] && [ "$tbNumber" -le ${#tables[@]} ]; then
		tbName="${tables[$((tbNumber - 1))]}"
		break
	    else
		echo "Invalid number, Please choose a valid table number."
	 fi
 done

if [[ ! -f .$tbName"_metadata" ]]
then
	echo "Metadata file for table '$tbName' is missing."
	break
fi

echo "Inserting into $tbName"
echo "Column Names and Data Types:"
mapfile -t metadata < ".$tbName"_metadata

columns=()
types=()
   for line in "${metadata[@]}"
	do
	colName=$(echo "$line" | cut -d: -f1)
	colType=$(echo "$line" | cut -d: -f2)
	columns+=("$colName")
	types+=("$colType")
	echo "$colName ($colType)"
	done

row=()
for index in "${!columns[@]}"
do
	colName=${columns[$index]}
	colType=${types[$index]}
	while true; 
	do
	    read -p "Enter data for $colName ($colType): " data
	    case $colType in
	    int)
		if ! [[ "$data" =~ ^[0-9]+$ ]]
		then 
		    echo "Invalid data, please enter data contain only numbers."
		    continue
		fi
		
		line=$(grep "^$colName:" .$tbName"_metadata")
    		if [[ "$line" == *"unique"* ]]
		then
		  if grep -q "^$data:" "$tbName"
        	   then
		      echo "The ID $data already exists. Please enter a unique value."
		      continue
		   fi
	    	fi
		;;
	    str) 
		if [[ "$data" == "" ]] || [[ ! "$data" =~ ^[a-zA-Z0-9@.""]+$ ]] 
		then
		    echo "string cannot be empty and must contain letters or number , try again."
		    continue
		fi
		;;
	    *)
		echo "unknown data type: $colType"
		continue
		;;
	    esac

	    row+=("$data")
	    break
	done
done

echo "${row[*]}" | sed 's/ /:/g' >>"$tbName"
echo "row inserted successfully in '$tbName'."
}
############################################################
function select_from_table() {
    cd "$current_dir/$dbName"
    echo "Available tables:"
    tables=()
    i=1
    for tb in *; do
        if [ -f "$tb" ] && [ ! -e "$tb"_metadata ]
        then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done

   if [ ${#tables[@]} -eq 0 ]
   then
	echo "No tables available in this database."
	return
    fi

while true; 
do
	read -p "Enter the number of the table: " tbNumber
        if [[ "$tbNumber" =~ ^[0-9]+$ ]] && [ "$tbNumber" -ge 1 ] && [ "$tbNumber" -le ${#tables[@]} ]
        then
            tbName="${tables[$((tbNumber - 1))]}"
            break
        else
            echo "Invalid number, Please choose a valid table number."
        fi
done

    echo "Table '$tbName' selected."
    
while true; 
do
    echo "Please choose display type:"
    select choice in "Select all" "Projection (Select by column)" "Selection (Select with condition)" "Exit"; 
    do
        case $REPLY in
            1) 
                echo "All Data in '$tbName':"
                cat ."$tbName"_metadata | awk -F: '{print $1}' | tr '\n' ':' | sed 's/:$/\n/'
                cat "$tbName"
                break
                ;;
            2) 
              	columns=$(cat ."$tbName"_metadata | awk -F: '{print $1}')
                echo "Please choose a column to display:"
		select colName in $columns "Exit"; 
		do
    		if [ "$colName" == "Exit" ]; 
    		then
       			 break
    		fi
    		
    		if [ -n "$colName" ]
    		then
			echo "Data for column '$colName':"
			colNumber=$(awk -F: -v name="$colName" '$1 == name {print NR}' ."$tbName"_metadata)
			awk -F: -v col="$colNumber" '{print $col}' "$tbName"
			break
    		else
        	         echo "Invalid column name. Please try again."
		fi
		done
                break
                ;;
            3) 
            	echo "All columns in '$tbName':"
                columns=($(awk -F: '{print $1}' ."$tbName"_metadata))
                echo "Please choose a column to display:"
		i=1
		for column in "${columns[@]}"
		do
		    echo "$i) $column"
		    i=$((i + 1))
		done
		
		read -p "Enter the column number to search in: " colNumber
		if [[ "$colNumber" =~ ^[0-9]+$ ]] && [ "$colNumber" -ge 1 ] && [ "$colNumber" -le ${#columns[@]} ]; 
		then
    			colName="${columns[$((colNumber - 1))]}"
    			echo "You selected column: $colName"
			read -p "Enter value to search for in '$colName': " value
    			row=$(awk -F: -v col="$colNumber" -v value="$value" '$col == value {print $0}' "$tbName")

                	if [ -n "$row" ]; then
				echo "Data for '$colName' = '$value':"
				echo "$row"
    			else
        			echo "No data found for '$colName' = '$value'."
    			fi
		else
    			echo "Invalid column number."
		fi
                break
                ;;
            4) 
                break 2
                ;;
            *) # Invalid choice
                echo "Invalid choice. Please try again."
                ;;
        esac
    done
done
}

####################################################################
function delete_from_table() {
    cd "$current_dir/$dbName"
    echo "Available tables:"
    tables=()
    i=1
    for tb in *; do
        if [ -f "$tb" ] && [ ! -e "$tb"_metadata ]
        then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done

   if [ ${#tables[@]} -eq 0 ]
   then
	echo "No tables available in this database."
	return
    fi
    
while true; 
do
	read -p "Enter the number of the table: " tbNumber
        if [[ "$tbNumber" =~ ^[0-9]+$ ]] && [ "$tbNumber" -ge 1 ] && [ "$tbNumber" -le ${#tables[@]} ]
        then
            tbName="${tables[$((tbNumber - 1))]}"
            break
        else
            echo "Invalid number, Please choose a valid table number."
        fi
done

    echo "Table '$tbName' selected."
    
while true; 
do
    echo "Please choose delete type:"
    select choice in "Delete all" "Deletion(delete by column)" "Exit"; 
    do
        case $REPLY in
            1) 
                echo "All Data in '$tbName':"
        	cat "$tbName"
		read -p "Are you sure you want to delete this data in '$tbName'? (yes/no): " check
		while [[ ! "$check" =~ ^(yes|no|y|n)$ ]]; 
		do
		    echo "Invalid option, Please enter (yes or no)."
		    read -p "Are you sure you want to delete (yes or no): " check
		done

		if [[ "$check" =~ ^(yes|y)$ ]]
		then 		
		    truncate -s 0 "$tbName"
		    echo "all data deleted in '$tbName' successfully"
		elif [[ "$check" =~ ^(no|n)$ ]]
		then
			echo "deletion cancelled"
		fi
       		break
       		;;
           2)
           	echo "All columns in '$tbName':"
                columns=($(awk -F: '{print $1}' ."$tbName"_metadata))
                echo "Please choose a column to display:"
		i=1
		for column in "${columns[@]}"
		do
		    echo "$i) $column"
		    i=$((i + 1))
		done
		
		read -p "Enter the column number to search in: " colNumber
		if [[ "$colNumber" =~ ^[0-9]+$ ]] && [ "$colNumber" -ge 1 ] && [ "$colNumber" -le ${#columns[@]} ]; 
		then
    			colName="${columns[$((colNumber - 1))]}"
    			echo "You selected column: $colName"
			read -p "Enter value to search for in '$colName': " value
    			row=$(awk -F: -v col="$colNumber" -v value="$value" '$col == value {print $0}' "$tbName")
                	if [ -n "$row" ]; then
				echo "Data for '$colName' = '$value':"
				echo "$row"
				read -p "Are you sure you want to delete this data in '$tbName'? (yes/no): " check
			while [[ ! "$check" =~ ^(yes|no|y|n)$ ]]; 
			do
			    echo "Invalid option, Please enter (yes or no)."
			    read -p "Are you sure you want to delete (yes or no): " check
			done

			if [[ "$check" =~ ^(yes|y)$ ]]
			then 		
			    sed -i "/$value/d" "$tbName"
			    echo "Data deleted successfully from '$tbName'"
			elif [[ "$check" =~ ^(no|n)$ ]]
			then
				echo "deletion cancelled"
			else 
			echo "invaild option"
			fi
    			else
        			echo "No data found for '$colName' = '$value'."
    			fi
		else
    			echo "Invalid column number."
		fi
                break
                ;;
            3) 
                break 2
                ;;
            *) 
                echo "Invalid choice. Please try again."
                ;;
        esac
    done
done
}
#######################################################################
function update_table() {
  cd "$current_dir/$dbName"
    echo "Available tables:"
    tables=()
    i=1
    for tb in *; do
        if [ -f "$tb" ] && [ ! -e "$tb"_metadata ]
        then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done

   if [ ${#tables[@]} -eq 0 ]
   then
	echo "No tables available in this database."
	return
    fi
    
while true; 
do
	read -p "Enter the number of the table: " tbNumber
        if [[ "$tbNumber" =~ ^[0-9]+$ ]] && [ "$tbNumber" -ge 1 ] && [ "$tbNumber" -le ${#tables[@]} ]
        then
            tbName="${tables[$((tbNumber - 1))]}"
            break
        else
            echo "Invalid number, Please choose a valid table number."
        fi
done

    echo "Table '$tbName' selected."
    
    echo "Current data in '$tbName':"
    cat "$tbName"
    
    read -p "Enter the ID of the row you want to update: " id
    row=$(grep "^$id:" "$tbName")
    if [ -z "$row" ]; then
        echo "No row found with ID '$id'."
        return
    else
        echo "Row found: $row"
    fi
   mapfile -t metadata < ".$tbName"_metadata

columns=()
types=()

for i in "${!metadata[@]}"; do
    colName=$(echo "${metadata[$i]}" | cut -d: -f1)
    colType=$(echo "${metadata[$i]}" | cut -d: -f2)
    columns+=("$colName")
    types+=("$colType")
    echo "$((i + 1))) $colName ($colType)"
  done


while true; do
    read -p "Enter the column number to update: " colNumber
    if [[ "$colNumber" =~ ^[0-9]+$ ]] && [ "$colNumber" -ge 1 ] && [ "$colNumber" -le ${#columns[@]} ]
    then
        colName="${columns[$((colNumber - 1))]}"
        break
    else
       echo "Invalid column number, Please try again."
    fi
done
 echo "You selected column: $colName"
 
while true
do
read -p "Enter the new value for '$colName': " newValue
colType="${types[$((colNumber - 1))]}"
	case $colType in
	    int)
		if ! [[ "$newValue" =~ ^[0-9]+$ ]]; then
		    echo "Invalid value, please enter a numeric value."
		    continue
		fi

		line=$(grep "^$colName:" .$tbName"_metadata")
    		if [[ "$line" == *"unique"* ]]
		then
		  if grep -q "^$newValue:" "$tbName"
        	   then
		      echo "The ID $newValue already exists. Please enter a unique value."
		      continue
		   fi
	    	fi
		;;
	    str)
		if [[ -z "$newValue" ]] || [[ ! "$newValue" =~ ^[a-zA-Z0-9@.""]+$ ]]; then
		    echo "Invalid string, it must contain letters, numbers, or symbols like '@' and '.'."
		    continue
		fi
		;;
	    *)
		echo "Unknown data type: $colType"
		continue
		;;
	esac
break
done

awk -F: -v OFS=: -v id="$id" -v colNumber="$colNumber" -v newValue="$newValue" '
$1 == id { $colNumber = newValue } 1
' "$tbName" > tmp && mv tmp "$tbName"

echo "Row with ID '$id' updated successfully."

}
