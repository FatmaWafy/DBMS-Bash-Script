#! /usr/bin/bash
current_dir=$(pwd)

function create_table() {
    cd "$current_dir/$dbName"

    while true; do
        read -p "Please Enter Table name: " tbName
        if [[ $tbName =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]
        then
            break
        else
            echo "Invalid table name."
            echo "Please enter a name with lowercase, uppercase letters, numbers, and underscores (_)."
        fi
    done

    if [ -e "$tbName" ]
    then
        echo "Table '$tbName' already exists."
    else
        PK=0
        while true; 
        do
            read -p "Please Enter number of columns: " colNumber
            if [[ $colNumber -gt 0 && "$colNumber" =~ ^[0-9]+$ ]]
            then
                break
            else
                echo "Invalid number, please enter a valid number."
            fi
        done

        for ((i=0; i<$colNumber; i++))
        do
            line=""
            while true; 
	    do
                read -p "Please Enter Column name: " colName
                if [[ $colName =~ ^[a-z]+$ ]]
                then
                    line+=$colName
                    break
                else
                    echo "Invalid column name, enter name with lowercase letters only."
                fi
            done

            while true; 
	    do
                read -p "Please Enter Column Datatype (int or str): " colType
                if [[ "$colType" == "int" || "$colType" == "str" ]] 
                then
                    line+=:$colType
                    break
                else
                    echo "Invalid datatype, Please enter (int or str)."
                fi
            done

            if [[ $PK -eq 0 ]]
            then
                while true; 
                do
                    read -p "Do you want to make this column PK (Yes or No): " checkPK
                    if [[ "$checkPK" =~ ^(yes|y|no|n)$ ]]
                    then
                        if [[ "$checkPK" =~ ^(yes|y)$ ]]
                        then
                            if [[ "$colType" == "int" ]]
                            then
                                line+=:PK:unique
                                PK=1
                                break
                            else
                                echo "PK must be of 'int' datatype."
                                read -p "Please Enter Column name: " colName
                                line=$colName
                                read -p "Please Enter Column Datatype (int or str): " colType
                                line+=:$colType
                            fi
                        else
                            break
                        fi
                    else
                        echo "Invalid option, Please enter (yes or no)."
                    fi
                done
            fi

            echo $line >> .$tbName"_metadata"

        done
        touch "$tbName"
        echo "Table '$tbName' created successfully."
    fi
}

########################################################
function list_table(){
cd "$current_dir/$dbName"
tables=$(ls -A |  grep -v '^\.')

if [ -z "$tables" ]
then
	echo "not exist tables in $dbName"
else
	echo "list tables in $dbName are:"
        echo "$tables" 
fi
}

########################################################
function drop_table(){
cd "$current_dir/$dbName" 

echo "Available tables:"
    tables=()
    i=1
    for tb in *; do
        if [ -f "$tb" ] && [ ! -e "$tb"_metadata ]; then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done


while true; 
do
	read -p "Enter Please number table: " tbNumber
	if ! [[ "$tbNumber" =~ ^[0-9]+$ ]]
	then
        	echo "Please enter a valid number."
        continue
    	fi
	if [ "$tbNumber" -ge 1 ] && [ "$tbNumber" -le ${#tables[@]} ]
	then
		tbName="${tables[$((tbNumber - 1))]}"
		break
	    else
		echo "Invalid number, Please choose a valid table number."
	 fi
 done
i=1
for table in $tables 
do
	if [ $tbNumber -eq $i ]
	then
		tbName=$table
		break
	fi
	
	i=$((i + 1))
done

read -p "Are you sure want to delete (yes or no): " check
while [[ ! "$check" =~ ^(yes|no|y|n)$ ]]; 
do
    echo "Invalid option, Please enter (yes or no)."
    read -p "Are you sure you want to delete (yes or no): " check
done

if [[ "$check" =~ ^(yes|y)$ ]]
then
	rm "$tbName"
 	rm .$tbName*
	echo "$tbName deleted successfuly"
elif [[ "$check" =~ ^(no|n)$ ]]
then
	echo "deletion cancelled"
fi
}

########################################################
function insert_into_table(){
cd "$current_dir/$dbName" 

echo "Tables that exist in '$dbName':"
    tables=()
    i=1
    for tb in *; do
        if [[ -f "$tb" && ! "$tb" == .* ]]; then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done

if [[ ${#tables[@]} -eq 0 ]]; then
        echo "No tables to insert data."
        return
    fi
    
while true; 
do
	read -p "Enter Please number table: " tbNumber
	if ! [[ "$tbNumber" =~ ^[0-9]+$ ]]
	then
        	echo "Please enter a valid number."
        continue
    	fi
	if [ "$tbNumber" -ge 1 ] && [ "$tbNumber" -le ${#tables[@]} ]; then
		tbName="${tables[$((tbNumber - 1))]}"
		break
	    else
		echo "Invalid number. Please choose a valid table number."
	 fi
 done

if [[ ! -f .$tbName"_metadata" ]]
then
	echo "Metadata file for table '$tbName' is missing."
	break
fi

echo "Inserting into $tbName"
echo "Column Names and Data Types:"
mapfile -t metadata < ".$tbName"_metadata

columns=()
types=()
   for line in "${metadata[@]}"
	do
	colName=$(echo "$line" | cut -d: -f1)
	colType=$(echo "$line" | cut -d: -f2)
	columns+=("$colName")
	types+=("$colType")
	echo "$colName ($colType)"
	done

row=()
for index in "${!columns[@]}"
do
	colName=${columns[$index]}
	colType=${types[$index]}
	while true; 
	do
	    read -p "Enter data for $colName ($colType): " data
	    case $colType in
	    int)
		if ! [[ "$data" =~ ^[0-9]+$ ]]
		then 
		    echo "Invalid data, please enter data contain (0-9)."
		    continue
		fi
		
		line=$(grep "^$colName:" .$tbName"_metadata")
    		if [[ "$line" == *"unique"* ]]
		then
		  if grep -q "^$data:" "$tbName"
        	   then
		      echo "The ID $data already exists. Please enter a unique value."
		      continue
		   fi
	    	fi
		;;
	    str) 
		if [[ "$data" == "" ]] || [[ ! "$data" =~ ^[a-zA-Z0-9@.""]+$ ]] 
		then
		    echo "string cannot be empty and must contain letters or number , try again."
		    continue
		fi
		;;
	    *)
		echo "unknown data type: $colType"
		continue
		;;
	    esac

	    row+=("$data")
	    break
	done
done

echo "${row[*]}" | sed 's/ /:/g' >>"$tbName"
echo "row inserted successfully in '$tbName'."
}
############################################################
function select_from_table() {
    cd "$current_dir/$dbName"

    echo "Available tables:"
    tables=()
    i=1
    for tb in *; do
        if [ -f "$tb" ] && [ ! -e "$tb"_metadata ]; then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done


    read -p "Enter the number of the table to select from: " tbNumber
    selected_table=""
    i=1
    for tb in "${tables[@]}"; do
        if [ "$tbNumber" -eq "$i" ]; then
            selected_table="$tb"
            break
        fi
        i=$((i + 1))
    done


    if [ -z "$selected_table" ]; then
        echo "Invalid table selection."
        return
    fi

    echo "Table '$selected_table' selected."
    
    while true; do
        echo "Please choose display type:"
        echo "1) Select all"
        echo "2) Select by column"
        echo "3) Select by ID"
        echo "4) Exit"
        read -p "Enter your choice (1:4): " display_choice

        case $display_choice in
            1) # Display all data
                echo "All Data:"
                echo "$(awk -F: '{print $1}' ."$selected_table"_metadata | paste -sd ":" -)"
                column -t -s " " "$selected_table"
                ;;
            2) # Display data by column
                read -p "Enter the column name: " colName

                # Check if column exists
                column_number=$(awk -F: -v name="$colName" '$1 == name {print NR}' ."$selected_table"_metadata)
                if [ -n "$column_number" ]; then
                    echo "Data for column '$colName':"
                    # Display data for the specified column
                    awk -F: -v col="$column_number" '{print $col}' "$selected_table"
                else
                    echo "Invalid column name. Please enter a valid column name."
                fi
                ;;
            3) # Display data by ID
                read -p "Enter the ID to search for: " search_id
                if [[ "$search_id" =~ ^[0-9]+$ ]]; then
                    
                    row=$(awk -F: -v id="$search_id" '$1 == id {print $0}' "$selected_table")
                    if [ -n "$row" ]; then
                        echo "Data for ID '$search_id':"
                        echo "$row"
                    else
                        echo "No data found for ID '$search_id'."
                    fi
                else
                    echo "Invalid ID. Please enter a valid number."
                fi
                ;;
            4) # Exit to main menu
                break
                ;;
            *) # Invalid choice
                echo "Invalid choice. Please try again."
                ;;
        esac
    done
}

####################################################################
function delete_from_table() {
    cd "$current_dir/$dbName"

    echo "Available tables:"
    tables=()
    i=1
    for tb in *; do
        if [ -f "$tb" ] && [ ! -e "$tb"_metadata ]; then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done

    read -p "Enter the number of the table to delete from: " tbNumber
    selected_table=""
    i=1
    for tb in "${tables[@]}"; do
        if [ "$tbNumber" -eq "$i" ]; then
            selected_table="$tb"
            break
        fi
        i=$((i + 1))
    done

    if [ -z "$selected_table" ]; then
        echo "Invalid table selection."
        return
    fi

    echo "Table '$selected_table' selected."

    while true; do
        echo "Delete options:"
        echo "1) Delete all data"
        echo "2) Delete by column value"
        echo "3) Delete by ID"
        echo "4) Back to main menu"
        read -p "Enter your choice (1:4): " delete_choice

        case $delete_choice in
            1) # Delete all data from the table
                > "$selected_table"
                echo "All data deleted from table '$selected_table'."
                ;;
            2) # Delete by column value
                read -p "Enter the column name: " column_name
                read -p "Enter the value to delete: " column_value

                
                col_index=$(awk -F: -v col="$column_name" '$1 == col {print NR}' "${selected_table}_metadata")
                if [ -z "$col_index" ]; then
                    echo "Invalid column name: $column_name"
                    continue
                fi

                
                awk -F: -v col="$col_index" -v val="$column_value" '$col != val' "$selected_table" > temp && mv temp "$selected_table"
                echo "Rows with value '$column_value' in column '$column_name' deleted."
                ;;
            3) # Delete by ID
                read -p "Enter the ID to delete: " delete_id
                if [[ "$delete_id" =~ ^[0-9]+$ ]]; then
                    
                    id_exists=$(awk -F: -v id="$delete_id" '$1 == id {print $0}' "$selected_table")
                    if [ -z "$id_exists" ]; then
                        echo "ID '$delete_id' not found in the table."
                    else
                        
                        awk -F: -v id="$delete_id" '$1 != id' "$selected_table" > temp && mv temp "$selected_table"
                        echo "Rows with ID '$delete_id' deleted."
                    fi
                else
                    echo "Invalid ID. Please enter a valid number."
                fi
                ;;
            4) # Go back to main menu
                break
                ;;
            *) # Invalid option
                echo "Invalid choice. Please try again."
                ;;
        esac
    done
}

#######################################################################
function update_table() {
    cd "$current_dir/$dbName"

  
    echo "Available tables:"
    tables=()
    i=1
    for tb in *; do
        if [ -f "$tb" ] && [ ! -e "$tb"_metadata ]; then
            tables+=("$tb")
            echo "$i) $tb"
            i=$((i + 1))
        fi
    done

    
    read -p "Enter the number of the table to update: " tbNumber
    selected_table=""
    i=1
    for tb in "${tables[@]}"; do
        if [ "$tbNumber" -eq "$i" ]; then
            selected_table="$tb"
            break
        fi
        i=$((i + 1))
    done

   
    if [ -z "$selected_table" ]; then
        echo "Invalid table selection."
        return
    fi

    echo "Table '$selected_table' selected."

   
    while true; do
        echo "Please choose Update type:"
        echo "1) Update by column"
        echo "2) Update by ID"
        echo "3) Exit"
        read -p "Enter your choice (1:3): " update_choice

        case $update_choice in
            1)  # Update by column
                read -p "Enter the column name: " column_name
                read -p "Enter the value to update: " column_value
                read -p "Enter the new value: " new_value

                
                col_index=$(awk -F: -v col="$column_name" '$1 == col {print NR}' "${selected_table}_metadata")
                if [ -z "$col_index" ]; then
                    echo "Invalid column name: $column_name"
                    continue
                fi

                
                awk -F: -v col="$col_index" -v val="$column_value" -v new_val="$new_value" \
                    '{ if ($col == val) $col = new_val; print $0 }' "$selected_table" > temp && mv temp "$selected_table"
                echo "Rows with value '$column_value' in column '$column_name' updated to '$new_value'."
                ;;

            2)  # Update by ID
                read -p "Enter the ID to update: " search_id
                read -p "Enter the new value: " new_value

               
                awk -F: -v id="$search_id" '$1 == id {found=1} END {if (!found) exit 1}' "$selected_table"
                if [ $? -ne 0 ]; then
                    echo "ID '$search_id' not found in the table."
                    continue
                fi

                
                awk -F: -v id="$search_id" -v new_val="$new_value" \
                    '{ if ($1 == id) $2 = new_val; print $0 }' "$selected_table" > temp && mv temp "$selected_table"
                echo "Row with ID '$search_id' updated to new value '$new_value'."
                ;;

            3)  # Exit
                break
                ;;

            *)  # Invalid option
                echo "Invalid option. Please try again."
                ;;
        esac
    done
}

